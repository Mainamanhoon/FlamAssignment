import java.util.*;

public class NQueens {
    
    static ArrayList<String> makeString(char[][] board){
        ArrayList<String> l = new ArrayList<>();
        for(int i = 0; i < board.length; i++) {
            String row = new String(board[i]);
            l.add(row);
        }
        return l;
    }

    static boolean isSafe(char[][] board, int row, int col) {
         for(int i = 0; i < row; i++) {
            if(board[i][col] == 'Q') return false;
        }

         int minLeft = Math.min(row, col);
        for(int i = 1; i <= minLeft; i++) {
            if(board[row-i][col-i] == 'Q') return false;
        }

         int maxRight = Math.min(row, board.length-1-col);
        for(int i = 1; i <= maxRight; i++) {
            if(board[row-i][col+i] == 'Q') return false;
        }
        return true;
    }

    static void queen(char[][] board, int row, List<List<String>> ans) {
        if(row == board.length) {
            ans.add(makeString(board));
            return;
        }

        for(int col = 0; col < board.length; col++) {
            if(safe(board, row, col)) {
                board[row][col] = 'Q';
                queen(board, row+1, ans);
                board[row][col] = '.';
            }
        }
    }
    
    public List<List<String>> solve(int n) {
        char[][] board = new char[n][n];
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                board[i][j] = '.';
            }
        }

        List<List<String>> ans = new ArrayList<>();
        queen(board, 0, ans);
        return ans;
    }
    
     public static String formatSolutions(List<List<String>> solutions) {
        StringBuilder sb = new StringBuilder();
        sb.append("[");
        
        for(int i = 0; i < solutions.size(); i++) {
            sb.append("[");
            List<String> solution = solutions.get(i);
            
            for(int j = 0; j < solution.size(); j++) {
                sb.append("\"").append(solution.get(j)).append("\"");
                if(j < solution.size() - 1) {
                    sb.append(",");
                }
            }
            sb.append("]");
            if(i < solutions.size() - 1) {
                sb.append(",");
            }
        }
        
        sb.append("]");
        return sb.toString();
    }
    
     public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        NQueens nq = new NQueens();
        
         int n = scanner.nextInt();
        
        if(n <= 0) {
            scanner.close();
            return;
        }
        
        List<List<String>> solutions = nq.solve(n);
        
         System.out.println(formatSolutions(solutions));
        
        scanner.close();
    }
}

EXPLAINATION : I used backtracking to place queens row by row, checking if each placement is safe (no conflicts in columns, diagonals) before recursively solving the next row.
For each row, try placing a queen in each column; if safe, place it and recurse to next row; if we reach the last row, we found a solution; otherwise backtrack and try the next position.